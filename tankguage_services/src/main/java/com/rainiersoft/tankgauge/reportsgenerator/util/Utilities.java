package com.rainiersoft.tankgauge.reportsgenerator.util;

import java.util.Calendar;
import com.rainiersoft.tankgauge.reportsgenerator.main.TankGaugingReportsGenerator;
import com.rainiersoft.tankgauge.reportsgenerator.definitions.ReportConstants;
import com.rainiersoft.tankgauge.reportsgenerator.definitions.InventoryReportConstants;

public class Utilities {

	/*
	 * This method gets current date and time for generating file name
	 */

	private String getFileAppender() {

		TankGaugingReportsGenerator.reportsLogger.debug(getClass().getName() + " : Generating file appender...");

		Calendar calUtil = Calendar.getInstance();
		int year, month, date, hours, minutes, seconds;

		year = calUtil.get(Calendar.YEAR);
		month = calUtil.get(Calendar.MONTH) + 1;
		date = calUtil.get(Calendar.DATE);
		hours = calUtil.get(Calendar.HOUR_OF_DAY);
		minutes = calUtil.get(Calendar.MINUTE);
		seconds = calUtil.get(Calendar.SECOND);

		return addLeadingZeros(year, month, date, hours, minutes, seconds);

	}

	/*
	 * This method auto generates the output file in a specific format
	 */

	public String getAutoGeneratedFileName(String fileName, String repType) {

		TankGaugingReportsGenerator.reportsLogger
		.debug(getClass().getName() + " : Auto generating file name for the pdf report...");

		if (!isOutputFileNameDefined(fileName)) {

			TankGaugingReportsGenerator.reportsLogger
			.debug(getClass().getName() + " : Output file name is not defined, system is auto-generating...");
			fileName = null;

		}

		// If the file name is null, check which type of report it is for
		// auto-generating in corresponding format

		if (fileName == null) {

			/*		switch (repType) {

			case InventoryReportConstants.INVENTORY_REPORT_TYPE_INPUT_PARAMETER: {

				fileName = ReportConstants.DEFAULT_ALARM_FILENAME_PREFIX;
				break;

			}

			}*/
			if (repType.equalsIgnoreCase(InventoryReportConstants.INVENTORY_REPORT_TYPE_INPUT_PARAMETER)) 

			{

				fileName = ReportConstants.DEFAULT_ALARM_FILENAME_PREFIX;
				//	break;

			}



		}

		// Check if the file name in configuration file has any extension

		if (fileName.indexOf(".") == -1) {
			return fileName + getFileAppender() + ReportConstants.DEFAULT_FILENAME_EXTENSION;
		}

		fileName = fileName.substring(0, fileName.lastIndexOf(".")) + getFileAppender()
		+ ReportConstants.DEFAULT_FILENAME_EXTENSION;

		return fileName;

	}

	/*
	 * This method gets current date and time with leading zeros for appending
	 * to the file name The date and time fields are generated in 2-digit format
	 */

	public String addLeadingZeros(int yr, int mon, int dt, int hr, int min, int sec) {

		TankGaugingReportsGenerator.reportsLogger
		.debug(getClass().getName() + " : Retrieving current date and time for file name generation...");

		String strMonth = (mon >= 10) ? Integer.toString(mon) : String.format("0%s", Integer.toString(mon));
		String strDate = (dt >= 10) ? Integer.toString(dt) : String.format("0%s", Integer.toString(dt));
		String strMinutes = (min >= 10) ? Integer.toString(min) : String.format("0%s", Integer.toString(min));
		String strSeconds = (sec >= 10) ? Integer.toString(sec) : String.format("0%s", Integer.toString(sec));

		return "_" + yr + "_" + strMonth + "_" + strDate + "_" + hr + "_" + strMinutes + "_" + strSeconds;

	}

	/*
	 * This method returns time in HH:mm:ss with leading zeros for appending
	 */

	public String appendLeadingZeros(long hr, long min, long sec) {

		String strHour = (hr >= 10) ? Long.toString(hr) : String.format("0%s", Long.toString(hr));
		String strMinutes = (min >= 10) ? Long.toString(min) : String.format("0%s", Long.toString(min));
		String strSeconds = (sec >= 10) ? Long.toString(sec) : String.format("0%s", Long.toString(sec));

		return strHour + ":" + strMinutes + ":" + strSeconds;

	}

	/*
	 * Check if the file name is specified in the configuration file
	 */

	public boolean isOutputFileNameDefined(String fileName) {

		if (fileName == null || fileName.length() == 0) {
			return false;
		}

		return true;

	}

	public String getPageLayoutType(String reportType) {

		String pageLayoutType = null;

		/*	switch (reportType) {

		case InventoryReportConstants.INVENTORY_REPORT_TYPE_INPUT_PARAMETER: {

			pageLayoutType = InventoryReportConstants.INVENTORY_PDF_PAGE_ORIENTATION;
			break;

		}

		}*/

		if (reportType.equalsIgnoreCase(InventoryReportConstants.INVENTORY_REPORT_TYPE_INPUT_PARAMETER)) 
		{
			pageLayoutType = InventoryReportConstants.INVENTORY_PDF_PAGE_ORIENTATION;

		}

		return pageLayoutType;

	}

}
